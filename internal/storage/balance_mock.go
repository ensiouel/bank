// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package storage

import (
	"bank/internal/model"
	"bank/pkg/postgres"
	"context"
	"github.com/google/uuid"
	"sync"
)

// Ensure, that BalanceStorageMock does implement BalanceStorage.
// If this is not the case, regenerate this file with moq.
var _ BalanceStorage = &BalanceStorageMock{}

// BalanceStorageMock is a mock implementation of BalanceStorage.
//
//	func TestSomethingThatUsesBalanceStorage(t *testing.T) {
//
//		// make and configure a mocked BalanceStorage
//		mockedBalanceStorage := &BalanceStorageMock{
//			AtomicUpdateFunc: func(ctx context.Context, tx postgres.Client, balance model.Balance) error {
//				panic("mock out the AtomicUpdate method")
//			},
//			CreateFunc: func(ctx context.Context, balance model.Balance) error {
//				panic("mock out the Create method")
//			},
//			GetFunc: func(ctx context.Context, userID uuid.UUID) (model.Balance, error) {
//				panic("mock out the Get method")
//			},
//			UpdateFunc: func(ctx context.Context, balance model.Balance) error {
//				panic("mock out the Update method")
//			},
//			WithTransactionFunc: func(ctx context.Context, fn func(tx postgres.Client) error) error {
//				panic("mock out the WithTransaction method")
//			},
//		}
//
//		// use mockedBalanceStorage in code that requires BalanceStorage
//		// and then make assertions.
//
//	}
type BalanceStorageMock struct {
	// AtomicUpdateFunc mocks the AtomicUpdate method.
	AtomicUpdateFunc func(ctx context.Context, tx postgres.Client, balance model.Balance) error

	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, balance model.Balance) error

	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, userID uuid.UUID) (model.Balance, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, balance model.Balance) error

	// WithTransactionFunc mocks the WithTransaction method.
	WithTransactionFunc func(ctx context.Context, fn func(tx postgres.Client) error) error

	// calls tracks calls to the methods.
	calls struct {
		// AtomicUpdate holds details about calls to the AtomicUpdate method.
		AtomicUpdate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Tx is the tx argument value.
			Tx postgres.Client
			// Balance is the balance argument value.
			Balance model.Balance
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Balance is the balance argument value.
			Balance model.Balance
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID uuid.UUID
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Balance is the balance argument value.
			Balance model.Balance
		}
		// WithTransaction holds details about calls to the WithTransaction method.
		WithTransaction []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Fn is the fn argument value.
			Fn func(tx postgres.Client) error
		}
	}
	lockAtomicUpdate    sync.RWMutex
	lockCreate          sync.RWMutex
	lockGet             sync.RWMutex
	lockUpdate          sync.RWMutex
	lockWithTransaction sync.RWMutex
}

// AtomicUpdate calls AtomicUpdateFunc.
func (mock *BalanceStorageMock) AtomicUpdate(ctx context.Context, tx postgres.Client, balance model.Balance) error {
	if mock.AtomicUpdateFunc == nil {
		panic("BalanceStorageMock.AtomicUpdateFunc: method is nil but BalanceStorage.AtomicUpdate was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Tx      postgres.Client
		Balance model.Balance
	}{
		Ctx:     ctx,
		Tx:      tx,
		Balance: balance,
	}
	mock.lockAtomicUpdate.Lock()
	mock.calls.AtomicUpdate = append(mock.calls.AtomicUpdate, callInfo)
	mock.lockAtomicUpdate.Unlock()
	return mock.AtomicUpdateFunc(ctx, tx, balance)
}

// AtomicUpdateCalls gets all the calls that were made to AtomicUpdate.
// Check the length with:
//
//	len(mockedBalanceStorage.AtomicUpdateCalls())
func (mock *BalanceStorageMock) AtomicUpdateCalls() []struct {
	Ctx     context.Context
	Tx      postgres.Client
	Balance model.Balance
} {
	var calls []struct {
		Ctx     context.Context
		Tx      postgres.Client
		Balance model.Balance
	}
	mock.lockAtomicUpdate.RLock()
	calls = mock.calls.AtomicUpdate
	mock.lockAtomicUpdate.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *BalanceStorageMock) Create(ctx context.Context, balance model.Balance) error {
	if mock.CreateFunc == nil {
		panic("BalanceStorageMock.CreateFunc: method is nil but BalanceStorage.Create was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Balance model.Balance
	}{
		Ctx:     ctx,
		Balance: balance,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, balance)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedBalanceStorage.CreateCalls())
func (mock *BalanceStorageMock) CreateCalls() []struct {
	Ctx     context.Context
	Balance model.Balance
} {
	var calls []struct {
		Ctx     context.Context
		Balance model.Balance
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *BalanceStorageMock) Get(ctx context.Context, userID uuid.UUID) (model.Balance, error) {
	if mock.GetFunc == nil {
		panic("BalanceStorageMock.GetFunc: method is nil but BalanceStorage.Get was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		UserID uuid.UUID
	}{
		Ctx:    ctx,
		UserID: userID,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(ctx, userID)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedBalanceStorage.GetCalls())
func (mock *BalanceStorageMock) GetCalls() []struct {
	Ctx    context.Context
	UserID uuid.UUID
} {
	var calls []struct {
		Ctx    context.Context
		UserID uuid.UUID
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *BalanceStorageMock) Update(ctx context.Context, balance model.Balance) error {
	if mock.UpdateFunc == nil {
		panic("BalanceStorageMock.UpdateFunc: method is nil but BalanceStorage.Update was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Balance model.Balance
	}{
		Ctx:     ctx,
		Balance: balance,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(ctx, balance)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedBalanceStorage.UpdateCalls())
func (mock *BalanceStorageMock) UpdateCalls() []struct {
	Ctx     context.Context
	Balance model.Balance
} {
	var calls []struct {
		Ctx     context.Context
		Balance model.Balance
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}

// WithTransaction calls WithTransactionFunc.
func (mock *BalanceStorageMock) WithTransaction(ctx context.Context, fn func(tx postgres.Client) error) error {
	if mock.WithTransactionFunc == nil {
		panic("BalanceStorageMock.WithTransactionFunc: method is nil but BalanceStorage.WithTransaction was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Fn  func(tx postgres.Client) error
	}{
		Ctx: ctx,
		Fn:  fn,
	}
	mock.lockWithTransaction.Lock()
	mock.calls.WithTransaction = append(mock.calls.WithTransaction, callInfo)
	mock.lockWithTransaction.Unlock()
	return mock.WithTransactionFunc(ctx, fn)
}

// WithTransactionCalls gets all the calls that were made to WithTransaction.
// Check the length with:
//
//	len(mockedBalanceStorage.WithTransactionCalls())
func (mock *BalanceStorageMock) WithTransactionCalls() []struct {
	Ctx context.Context
	Fn  func(tx postgres.Client) error
} {
	var calls []struct {
		Ctx context.Context
		Fn  func(tx postgres.Client) error
	}
	mock.lockWithTransaction.RLock()
	calls = mock.calls.WithTransaction
	mock.lockWithTransaction.RUnlock()
	return calls
}
