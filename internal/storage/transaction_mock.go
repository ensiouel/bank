// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package storage

import (
	"bank/internal/model"
	"bank/pkg/postgres"
	"bank/pkg/sort"
	"context"
	"github.com/google/uuid"
	"sync"
)

// Ensure, that TransactionStorageMock does implement TransactionStorage.
// If this is not the case, regenerate this file with moq.
var _ TransactionStorage = &TransactionStorageMock{}

// TransactionStorageMock is a mock implementation of TransactionStorage.
//
//	func TestSomethingThatUsesTransactionStorage(t *testing.T) {
//
//		// make and configure a mocked TransactionStorage
//		mockedTransactionStorage := &TransactionStorageMock{
//			AtomicCreateFunc: func(ctx context.Context, tx postgres.Client, transaction model.Transaction) error {
//				panic("mock out the AtomicCreate method")
//			},
//			CreateFunc: func(ctx context.Context, transaction model.Transaction) error {
//				panic("mock out the Create method")
//			},
//			SelectFunc: func(ctx context.Context, userID uuid.UUID, filter sort.Filter) ([]model.Transaction, error) {
//				panic("mock out the Select method")
//			},
//		}
//
//		// use mockedTransactionStorage in code that requires TransactionStorage
//		// and then make assertions.
//
//	}
type TransactionStorageMock struct {
	// AtomicCreateFunc mocks the AtomicCreate method.
	AtomicCreateFunc func(ctx context.Context, tx postgres.Client, transaction model.Transaction) error

	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, transaction model.Transaction) error

	// SelectFunc mocks the Select method.
	SelectFunc func(ctx context.Context, userID uuid.UUID, filter sort.Filter) ([]model.Transaction, error)

	// calls tracks calls to the methods.
	calls struct {
		// AtomicCreate holds details about calls to the AtomicCreate method.
		AtomicCreate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Tx is the tx argument value.
			Tx postgres.Client
			// Transaction is the transaction argument value.
			Transaction model.Transaction
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Transaction is the transaction argument value.
			Transaction model.Transaction
		}
		// Select holds details about calls to the Select method.
		Select []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID uuid.UUID
			// Filter is the filter argument value.
			Filter sort.Filter
		}
	}
	lockAtomicCreate sync.RWMutex
	lockCreate       sync.RWMutex
	lockSelect       sync.RWMutex
}

// AtomicCreate calls AtomicCreateFunc.
func (mock *TransactionStorageMock) AtomicCreate(ctx context.Context, tx postgres.Client, transaction model.Transaction) error {
	if mock.AtomicCreateFunc == nil {
		panic("TransactionStorageMock.AtomicCreateFunc: method is nil but TransactionStorage.AtomicCreate was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Tx          postgres.Client
		Transaction model.Transaction
	}{
		Ctx:         ctx,
		Tx:          tx,
		Transaction: transaction,
	}
	mock.lockAtomicCreate.Lock()
	mock.calls.AtomicCreate = append(mock.calls.AtomicCreate, callInfo)
	mock.lockAtomicCreate.Unlock()
	return mock.AtomicCreateFunc(ctx, tx, transaction)
}

// AtomicCreateCalls gets all the calls that were made to AtomicCreate.
// Check the length with:
//
//	len(mockedTransactionStorage.AtomicCreateCalls())
func (mock *TransactionStorageMock) AtomicCreateCalls() []struct {
	Ctx         context.Context
	Tx          postgres.Client
	Transaction model.Transaction
} {
	var calls []struct {
		Ctx         context.Context
		Tx          postgres.Client
		Transaction model.Transaction
	}
	mock.lockAtomicCreate.RLock()
	calls = mock.calls.AtomicCreate
	mock.lockAtomicCreate.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *TransactionStorageMock) Create(ctx context.Context, transaction model.Transaction) error {
	if mock.CreateFunc == nil {
		panic("TransactionStorageMock.CreateFunc: method is nil but TransactionStorage.Create was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Transaction model.Transaction
	}{
		Ctx:         ctx,
		Transaction: transaction,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, transaction)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedTransactionStorage.CreateCalls())
func (mock *TransactionStorageMock) CreateCalls() []struct {
	Ctx         context.Context
	Transaction model.Transaction
} {
	var calls []struct {
		Ctx         context.Context
		Transaction model.Transaction
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Select calls SelectFunc.
func (mock *TransactionStorageMock) Select(ctx context.Context, userID uuid.UUID, filter sort.Filter) ([]model.Transaction, error) {
	if mock.SelectFunc == nil {
		panic("TransactionStorageMock.SelectFunc: method is nil but TransactionStorage.Select was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		UserID uuid.UUID
		Filter sort.Filter
	}{
		Ctx:    ctx,
		UserID: userID,
		Filter: filter,
	}
	mock.lockSelect.Lock()
	mock.calls.Select = append(mock.calls.Select, callInfo)
	mock.lockSelect.Unlock()
	return mock.SelectFunc(ctx, userID, filter)
}

// SelectCalls gets all the calls that were made to Select.
// Check the length with:
//
//	len(mockedTransactionStorage.SelectCalls())
func (mock *TransactionStorageMock) SelectCalls() []struct {
	Ctx    context.Context
	UserID uuid.UUID
	Filter sort.Filter
} {
	var calls []struct {
		Ctx    context.Context
		UserID uuid.UUID
		Filter sort.Filter
	}
	mock.lockSelect.RLock()
	calls = mock.calls.Select
	mock.lockSelect.RUnlock()
	return calls
}
